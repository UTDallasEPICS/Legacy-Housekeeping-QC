generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  // Indexes
  id    Int     @id @default(autoincrement())
  // Fields
  first_name   String 
  last_name    String
  country_code String? 
  state_code   String?
  phone_number String?
  type  PersonType
  // Relations
  user User?
  teamMember TeamMember?
}

enum PersonType {
  USER
  TEAM_MEMBER
}

model User {
  // Indexes
  person_id Int @unique @id
  // Fields
  email    String  @unique
  password String
  // Relations
  person Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  inspections Inspection[]
}

model TeamMember {
  // Indexes
  person_id Int @unique @id
  // Fields
  email String?
  // Relations
  person Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  scores Score[]
  Schedule Schedule[]
}

model Score {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  amount Int
  // Relations
  team_member TeamMember[]
  inspection_id Int @unique
  inspection Inspection @relation(fields: [inspection_id], references: [id])
}

model Schedule {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  start_time DateTime?
  end_time   DateTime?
  clean_type CleanType @default(NORMAL)
  // Relations
  room_id Int
  room Room @relation(fields: [room_id], references: [id])
  team_members TeamMember[]
  inspections Inspection[]
}

enum CleanType {
  NORMAL
  DEEP
}

model Room {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  name String
  type RoomType
  common_area CommonArea?
  personal_room PersonalRoom?
  // Relations
  building_id Int
  building Building @relation(fields: [building_id], references: [id])
  floor_number Int
  items Item[]
  @@index([building_id, floor_number])
  Schedule Schedule[]
}

enum RoomType {
  COMMON_AREA
  PERSONAL_ROOM
}

model CommonArea {
  // Indexes
  id Int @id
  // Fields
  // Relations
  room_id Int @unique
  room Room @relation(fields: [room_id], references: [id])
}

model PersonalRoom {
  // Indexes
  id Int @id
  // Fields
  is_occupied Boolean
  // Relations
  room_id Int @unique
  room Room @relation(fields: [room_id], references: [id])
}

model Building {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  name String
  floor_count Int
  // Relations
  rooms Room[]
}

model Inspection {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  timestamp DateTime?
  room_pics String?
  comment String?
  inspect_status Inspect_Status
  clean_status Clean_Status?
  extra_score Int @default(0)
  // Relations
  inspector_id Int 
  inspector User @relation(fields: [inspector_id], references: [person_id])
  schedule_id Int 
  rubric_id Int
  rubric Rubric @relation(fields: [rubric_id], references: [id])
  score Score?
  schedule Schedule @relation(fields: [schedule_id], references: [id])
  }

enum Inspect_Status {
  INSPECTED
  NOT_INSPECTED
  UNFINISHED
}

enum Clean_Status {
  CLEANED
  NOT_CLEANED
  UNFINISHED
}

model Rubric {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  type RubricType
  quantitative_rubric QuantitativeRubric?
  hollistic_rubric HollisticRubric?
  // Relations
  inspection Inspection[]
}

enum RubricType {
  QUANTITATIVE
  HOLLISTIC
}

model QuantitativeRubric {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  // Relations
  rubric_id Int @unique
  rubric Rubric @relation(fields: [rubric_id], references: [id])
  items Item[]
}

model HollisticRubric {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  // Relations
  rubric_id Int @unique
  rubric Rubric @relation(fields: [rubric_id], references: [id])
  requirements Requirement[]
}

model Requirement {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  category String
  description String
  is_checked Boolean
  weight Int @default(1)
  // Relations
  hollistic_id Int 
  hollistic_rubric HollisticRubric @relation(fields: [hollistic_id], references: [id])
}


model Item {
  // Indexes
  id Int @id @default(autoincrement())
  // Fields
  category String
  name String
  is_checked Boolean
  weight Int @default(1)
  // Relations
  room_id Int
  room Room @relation(fields: [room_id], references: [id])
  quantitative_id Int
  quantitative_rubric QuantitativeRubric @relation(fields: [quantitative_id], references: [id])
}
