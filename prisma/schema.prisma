generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String   @id @default(uuid())
  first_name   String
  last_name    String
  email        String   @unique
  country_code String
  state_code   String
  phone_number String
  password     String
  role         Role     @default(USER)
  admin        Admin[]
  leader       Leader[]
}

model Admin {
  admin_id String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [user_id])

  @@index([userId], map: "Admin_userId_fkey")
}

model Leader {
  leader_id String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [user_id])

  @@index([userId], map: "Leader_userId_fkey")
}

model TeamMembers {
  member_id    String       @id @default(uuid())
  first_name   String
  last_name    String
  email        String
  country_code String
  state_code   String
  phone_number String
  address_line String
  zipcode      String
  city         String
  state        String
  total_points Int          @default(0)
  points       Points[]
  rooms_report RoomReport[]
}

model Points {
  points_id      String      @id @default(uuid())
  points         Int         @default(0)
  time_stamp     DateTime    @default(now())
  team_member_id String
  team_member    TeamMembers @relation(fields: [team_member_id], references: [member_id])

  @@index([team_member_id], map: "Points_team_member_id_fkey")
}

model Room {
  room_id         String       @id @default(uuid())
  room_number     String
  building_number String
  room_name       String
  floor_num       String
  is_clean        Boolean
  is_active       Boolean
  type_of_room    String
  restroom        Restrooms[]
  rooms_report    RoomReport[]
}

model RoomReport {
  team_member_id String
  room_id        String
  date           DateTime?    @default(now())
  cleaned        Boolean     @default(false)
  comments       String?
  score          Int
  room           Room        @relation(fields: [room_id], references: [room_id])
  team_member    TeamMembers @relation(fields: [team_member_id], references: [member_id])

  @@id([team_member_id, room_id])
  @@index([room_id], map: "RoomReport_room_id_fkey")
}

model Items {
  item_id        String             @id @default(uuid())
  item           String
  restroom_id    String
  ancillary_id   String
  independent_id String
  assisted_id    String
  skilled_id     String
  memory_id      String
  ancillary      Ancillary_Areas    @relation(fields: [ancillary_id], references: [ancillary_id])
  assisted       Assisted_Living    @relation(fields: [assisted_id], references: [assisted_id])
  independent    Independent_Living @relation(fields: [independent_id], references: [independent_id])
  memory         Memory             @relation(fields: [memory_id], references: [memory_id])
  restroom       Restrooms          @relation(fields: [restroom_id], references: [restroom_id])
  skilled        Skilled            @relation(fields: [skilled_id], references: [skilled_id])

  @@index([ancillary_id], map: "Items_ancillary_id_fkey")
  @@index([assisted_id], map: "Items_assisted_id_fkey")
  @@index([independent_id], map: "Items_independent_id_fkey")
  @@index([memory_id], map: "Items_memory_id_fkey")
  @@index([restroom_id], map: "Items_restroom_id_fkey")
  @@index([skilled_id], map: "Items_skilled_id_fkey")
}

model Restrooms {
  restroom_id String  @id @default(uuid())
  room_id     String
  items       Items[]
  room        Room    @relation(fields: [room_id], references: [room_id])

  @@index([room_id], map: "Restrooms_room_id_fkey")
}

model Ancillary_Areas {
  ancillary_id String  @id @default(uuid())
  items        Items[]
}

model Independent_Living {
  independent_id String  @id @default(uuid())
  items          Items[]
}

model Assisted_Living {
  assisted_id String  @id @default(uuid())
  items       Items[]
}

model Skilled {
  skilled_id String  @id @default(uuid())
  items      Items[]
}

model Memory {
  memory_id String  @id @default(uuid())
  items     Items[]
}

enum Role {
  USER
  ADMIN
}
