generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  person_id    Int     @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String  @unique
  country_code String
  state_code   String
  phone_number String

  User User?
  TeamMembers TeamMembers?
}

model User {
  user_id Int @id
  person Person @relation(fields: [user_id], references: [person_id])
  username String
  password String
  inspections Inspection[]
}

model TeamMembers{
  team_member_id Int @id
  person Person @relation(fields: [team_member_id], references: [person_id])
  scores Score[]
  schedules Schedule[]
}

model Score {
  score_id Int @id @default(autoincrement())
  score Int
  team_member_id Int
  team_member TeamMembers @relation(fields: [team_member_id], references: [team_member_id])
}


model Schedule {
  schedule_id Int @id @default(autoincrement())
  start_time DateTime
  end_time   DateTime
  clean_type CleanType

  team_member TeamMembers[]
  
  room_id Int
  room Room @relation(fields: [room_id], references: [room_id])

  inspections Inspection[]
}

enum CleanType {
  NORMAL
  DEEP
}

model Room {
  room_id Int @id @default(autoincrement())
  room_name String

  schedule Schedule[]
  
  building_id Int
  building Building @relation(fields: [building_id], references: [building_id])

  common_area CommonArea?
  personal_room PersonalRoom?
  items Item[]
}

model CommonArea {
  room_id Int @id
  room Room @relation(fields: [room_id], references: [room_id])
}

model PersonalRoom {
  room_id Int @id
  room Room @relation(fields: [room_id], references: [room_id])
  is_occupied Boolean
  items Item[]
}


model Building {
  building_id Int @id @default(autoincrement())
  building_name String
  rooms Room[]
}

model Inspection {
  inspector_id Int @id
  inspector User @relation(fields: [inspector_id], references: [user_id])

  schedule_id Int
  schedule Schedule @relation(fields: [schedule_id], references: [schedule_id])

  timestamp DateTime
  room_pics String
  comment String
  clean_status Clean_Status
  inspection_score Int 
  rubrics Rubric[]
}

enum Clean_Status {
  CLEANED
  NOT_CLEANED
  UNFINISHED
}

model Rubric {
  rubric_id Int @id @default(autoincrement())
  inspection Inspection[]
  requirements Requirement[]

  quantitative_rubrics QuantitativeRubric?
  hollistic_rubrics HollisticRubric?
}

model QuantitativeRubric {
  quantitative_id Int @id
  rubric Rubric @relation(fields: [quantitative_id], references: [rubric_id])
  items Item[]
}

model HollisticRubric {
  hollistic_id Int @id
  rubric Rubric @relation(fields: [hollistic_id], references: [rubric_id])
}

model Requirement {
  requirement_id Int @id @default(autoincrement())
  rubric_id Int 
  rubric Rubric @relation(fields: [rubric_id], references: [rubric_id])
}

model Item {
  item_name String

  room_id Int
  room Room @relation(fields: [room_id], references: [room_id])

  @@id([room_id, item_name])

  quantitative_id Int
  quantitative_rubrics QuantitativeRubric @relation(fields: [quantitative_id], references: [quantitative_id])
  
  personal_room_id Int
  personal_room PersonalRoom @relation(fields: [personal_room_id], references: [room_id])
}
