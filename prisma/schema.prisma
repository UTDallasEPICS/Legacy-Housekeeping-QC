generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id          Int     @id @default(autoincrement())
  first_name  String
  last_name   String
  country_code String?
  state_code  String?
  phone_number String?
  type        PersonType
  user        User?
  teamMember  TeamMember?
}

enum PersonType {
  USER
  TEAM_MEMBER
}

model User {
  person_id   Int     @unique @id
  email       String  @unique
  password    String
  person      Person  @relation(fields: [person_id], references: [id], onDelete: Cascade)
  inspections Inspection[]
}

model TeamMember {
  person_id   Int     @unique @id
  email       String?
  person      Person  @relation(fields: [person_id], references: [id], onDelete: Cascade)
  schedules   Schedule[]
  scores      Score[]
}

model Score {
  id          Int     @id @default(autoincrement())
  amount      Int
  team_member TeamMember[]
  inspection_id Int   @unique
  inspection  Inspection @relation(fields: [inspection_id], references: [id])
}

model Schedule {
  id          Int     @id @default(autoincrement())
  start_time  DateTime?
  end_time    DateTime?
  clean_type  CleanType @default(NORMAL)
  room_id     Int
  room        Room     @relation(fields: [room_id], references: [id])
  team_members TeamMember[]
  inspections Inspection[]
}

enum CleanType {
  NORMAL
  DEEP
}

model Room {
  id          Int     @id @default(autoincrement())
  name        String
  type        RoomType
  common_area CommonArea?
  personal_room PersonalRoom?
  building_id Int
  building    Building @relation(fields: [building_id], references: [id])
  floor_number Int
  schedule    Schedule[]
  items       Item[]
  @@index([building_id, floor_number])
}

enum RoomType {
  COMMON_AREA
  PERSONAL_ROOM
}

model CommonArea {
  id          Int     @id
  room_id     Int     @unique
  room        Room    @relation(fields: [room_id], references: [id])
}

model PersonalRoom {
  id          Int     @id
  is_occupied Boolean
  room_id     Int     @unique
  room        Room    @relation(fields: [room_id], references: [id])
}

model Building {
  id          Int     @id @default(autoincrement())
  name        String
  floor_count Int
  rooms       Room[]
}

model Inspection {
  id          Int     @id @default(autoincrement())
  timestamp   DateTime?
  room_pics   String?
  comment     String?
  inspect_status Inspect_Status
  clean_status Clean_Status?
  extra_score Int     @default(0)
  inspector_id Int
  inspector   User    @relation(fields: [inspector_id], references: [person_id])
  schedule_id Int
  schedule    Schedule @relation(fields: [schedule_id], references: [id])
  rubric_id   Int
  rubric      Rubric  @relation(fields: [rubric_id], references: [id])
  score       Score?
  images      Image[]
}

enum Inspect_Status {
  INSPECTED
  NOT_INSPECTED
  UNFINISHED
}

enum Clean_Status {
  CLEANED
  NOT_CLEANED
  UNFINISHED
}

model Rubric {
  id          Int     @id @default(autoincrement())
  type        RubricType
  quantitative_rubric QuantitativeRubric?
  hollistic_rubric HollisticRubric?
  inspection  Inspection[]
}

enum RubricType {
  QUANTITATIVE
  HOLLISTIC
}

model QuantitativeRubric {
  id          Int     @id @default(autoincrement())
  rubric_id   Int     @unique
  rubric      Rubric  @relation(fields: [rubric_id], references: [id])
  items       Item[]
}

model HollisticRubric {
  id          Int     @id @default(autoincrement())
  rubric_id   Int     @unique
  rubric      Rubric  @relation(fields: [rubric_id], references: [id])
  requirements Requirement[]
}

model Requirement {
  id          Int     @id @default(autoincrement())
  category    String
  description String
  is_checked  Boolean
  weight      Int     @default(1)
  hollistic_id Int
  hollistic_rubric HollisticRubric @relation(fields: [hollistic_id], references: [id])
}

model Item {
  id          Int     @id @default(autoincrement())
  category    String
  name        String
  is_checked  Boolean
  weight      Int     @default(1)
  room_id     Int
  room        Room    @relation(fields: [room_id], references: [id])
  quantitative_id Int
  quantitative_rubric QuantitativeRubric @relation(fields: [quantitative_id], references: [id])
}

model Image {
  id            Int       @id @default(autoincrement())
  url           String
  inspection_id Int
  inspection    Inspection @relation(fields: [inspection_id], references: [id])
}